// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeNoise
#pragma kernel MarchingCubes

struct NoiseLayer3D
{
    float LayerWeigth;
    
    int GradientOffset;
    int NoiseScale;
    
    int UseSmootherStep;
};

struct CubeMesh
{
    float Vertices[12];
    int Triangles[12];
};

static float _DefaultVertices[12] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };
static int _DefaultTriangles[12] = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 };

RWTexture3D<float4> _NoiseTexture;

RWStructuredBuffer<CubeMesh> _ResultMeshs;

int3 _ZoneToGenerateSize;

// Noise Params
uint _NoiseLayersCount;
StructuredBuffer<NoiseLayer3D> _NoiseLayers;

float _NoiseWeigthsMultiplier;

float Smoothstep(float w)
{
    w = clamp(w, 0.0f, 1.0f);
    return w * w * (3.0f - 2.0f * w);
}

float Smootherstep(float w)
{
    w = clamp(w, 0.0f, 1.0f);
    return ((w * (w * 6.0 - 15.0) + 10.0) * w * w * w);
}

float Interpolate(float a0, float a1, float w, bool smootherStep)
{
    //return (a1 - a0) * w + a0;
    float smoothW = 0;
    if (smootherStep)
    {
        smoothW = Smootherstep(w);
    }
    else
    {
        smoothW = Smoothstep(w);
    }

    return a0 + (a1 - a0) * smoothW;
}

// Hash function from H. Schechter & R. Bridson, goo.gl/RXiKaH
uint Hash(uint s)
{
    s ^= 2747636419u;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    s ^= s >> 16;
    s *= 2654435769u;
    return s;
}

float RandomFloat(inout uint seed)
{
    seed = Hash(seed);
    float random = float(seed) / 4294967295.0; // 2^32-1 
    return random * 2 - 1; // [-1;1]
}

float3 RandomFloat3InsideUnitSphere(inout int seed)
{
    float3 attempt;
    do
    {
        attempt = float3(RandomFloat(seed), RandomFloat(seed), RandomFloat(seed));
    } while (attempt.x * attempt.x + attempt.y * attempt.y + attempt.z * attempt.z > 1);
    return attempt;
}

float3 RandomGradient(int ix, int iy, int iz, int gradientOffset)
{
    // No precomputed gradients mean this works for any number of grid coordinates
    uint w = 8 * 4;
    uint s = w / 2; // rotation width
    uint a = ix, b = iy, c = iz;
    a *= 3284157443;
    b ^= a << s | a >> w - s;
    b *= 1911520717 - abs(gradientOffset);
    c ^= b << s | b >> w - s;
    c *= 1529716214;
    a ^= c << s | c >> w - s;
    a *= 2048419325;
    
    return RandomFloat3InsideUnitSphere(a);
}

float DotGridGradient(int ix, int iy, int iz, float x, float y, float z, int gradientOffset)
{
    float3 randomVec = RandomGradient(ix, iy, iz, gradientOffset);
    
    // Compute the distance vector
    float dx = x - (float) ix;
    float dy = y - (float) iy;
    float dz = z - (float) iz;
 
    // Compute the dot-product
    return (dx * randomVec.x + dy * randomVec.y + dz * randomVec.z);
}

float ComputeNoiseForCoordinates(uint ix, uint iy, uint iz)
{
    float value = 0;
    
    for (uint i = 0; i < _NoiseLayersCount; i++)
    {
        NoiseLayer3D currentLayer = _NoiseLayers[i];
        int noiseScale = currentLayer.NoiseScale;
        int offset = currentLayer.GradientOffset;
        bool smootherstep = currentLayer.UseSmootherStep == 1;
        
        float x = float(ix) / ceil((float) _ZoneToGenerateSize.x / noiseScale);
        float y = float(iy) / ceil((float) _ZoneToGenerateSize.y / noiseScale);
        float z = float(iz) / ceil((float) _ZoneToGenerateSize.z / noiseScale);
    
        // Determine grid cell coordinates
        int x0 = int(floor(x));
        int x1 = x0 + 1;
        int y0 = int(floor(y));
        int y1 = y0 + 1;
        int z0 = int(floor(z));
        int z1 = z0 + 1;
 
        // Determine interpolation weights
        // Could also use higher order polynomial/s-curve here
        float sx = x - (float) x0;
        float sy = y - (float) y0;
        float sz = z - (float) z0;
 
        // Interpolate between grid point gradients
        float n0 = DotGridGradient(x0, y0, z0, x, y, z, offset);
        float n1 = DotGridGradient(x1, y0, z0, x, y, z, offset);
        float iy0z0 = Interpolate(n0, n1, sx, smootherstep);
        
        n0 = DotGridGradient(x0, y1, z0, x, y, z, offset);
        n1 = DotGridGradient(x1, y1, z0, x, y, z, offset);
        float iy1z0 = Interpolate(n0, n1, sx, smootherstep);
        
        float iz0 = Interpolate(iy0z0, iy1z0, sy, smootherstep);
        
        
        n0 = DotGridGradient(x0, y0, z1, x, y, z, offset);
        n1 = DotGridGradient(x1, y0, z1, x, y, z, offset);
        float iy0z1 = Interpolate(n0, n1, sx, smootherstep);
        
        n0 = DotGridGradient(x0, y1, z1, x, y, z, offset);
        n1 = DotGridGradient(x1, y1, z1, x, y, z, offset);
        float iy1z1 = Interpolate(n0, n1, sx, smootherstep);
        
        float iz1 = Interpolate(iy0z1, iy1z1, sy, smootherstep);
        
        float layerValue = Interpolate(iz0, iz1, sz, smootherstep);
    
        layerValue = layerValue / 2 + 0.5f;
        
        value += layerValue * currentLayer.LayerWeigth * _NoiseWeigthsMultiplier;
    }
    return value;
}

CubeMesh NewCubeMesh()
{
    CubeMesh mesh;
    mesh.Triangles = _DefaultTriangles;
    mesh.Vertices = _DefaultVertices;
    return mesh;

}

[numthreads(8, 8, 8)]
void ComputeNoise(uint3 id : SV_DispatchThreadID)
{
    float value = ComputeNoiseForCoordinates(id.x, id.y, id.z);
    _NoiseTexture[id.xyz] = float4(value, value, value, 1);
}

[numthreads(8, 8, 8)]
void MarchingCubes(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x + id.y * _ZoneToGenerateSize.x + id.z * _ZoneToGenerateSize.x * _ZoneToGenerateSize.y;
    CubeMesh mesh = NewCubeMesh();
    
    _ResultMeshs[index] = mesh;

}