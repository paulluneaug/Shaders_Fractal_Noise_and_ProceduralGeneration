// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PerlinNoise

struct NoiseLayer
{
    float LayerWeigth;
    
    int GradientOffset;
    int GradientSizeX;
    int GradientSizeY;
    
    int UseSmootherStep;
};

struct GradientKey
{
    float Time;
    float4 Color;
};

RWTexture2D<float4> _ResultTexture;
RWStructuredBuffer<float> _ResultBuffer;
int _ResultBufferSizeX;

int _NoiseLayersCount;
StructuredBuffer<NoiseLayer> _NoiseLayers;

float _NoiseWeigthsMultiplier;

// Gradient
StructuredBuffer<GradientKey> _Gradient;
uint _GradientSize;

float4 SampleColor(float time)
{
    if (_GradientSize == 0)
    {
        return lerp(float4(0, 0, 0, 1), float4(1, 1, 1, 1), time);
    }

    if (_GradientSize == 1 || time <= _Gradient[0].Time)
    {
        return _Gradient[0].Color;
    }

    uint keyIndex = 0;
    while (!(_Gradient[keyIndex].Time <= time && time <= _Gradient[keyIndex + 1].Time) && keyIndex < _GradientSize - 1)
    {
        keyIndex++;
    }

    if (keyIndex == _GradientSize - 1)
    {
        return _Gradient[keyIndex].Color;
    }

    GradientKey lowerKey = _Gradient[keyIndex];
    GradientKey upperKey = _Gradient[keyIndex + 1];
    if (time == lowerKey.Time)
    {
        return float4(0, 0, 0, 1);
    }

    float newTime = float(time - lowerKey.Time) / float(upperKey.Time - lowerKey.Time);
                // return lerp((0,0,0,1), (1,1,1,1), newTime);
    return lerp(lowerKey.Color, upperKey.Color, newTime);
}

float Smoothstep(float w)
{
    w = clamp(w, 0.0f, 1.0f);
    return w * w * (3.0f - 2.0f * w);
}

float Smootherstep(float w)
{
    w = clamp(w, 0.0f, 1.0f);
    return ((w * (w * 6.0 - 15.0) + 10.0) * w * w * w);
}

float Interpolate(float a0, float a1, float w, int smootherStep)
{
    //return (a1 - a0) * w + a0;
    float smoothW = 0;
    if (smootherStep == 1)
    {
        smoothW = Smootherstep(w);
    }
    else
    {
        smoothW = Smoothstep(w);
    }

    return a0 + (a1 - a0) * smoothW;
}

float2 RandomGradient(int ix, int iy, int gradientOffset)
{
    // No precomputed gradients mean this works for any number of grid coordinates
    uint w = 8 * 4;
    uint s = w / 2; // rotation width
    uint a = ix, b = iy;
    a *= 3284157443;
    b ^= a << s | a >> w - s;
    b *= 1911520717 - abs(gradientOffset);
    a ^= b << s | b >> w - s;
    a *= 2048419325;
    float random = a * (3.14159265 / ~(~0u >> 1)); // in [0, 2*Pi]
    
    return float2(cos(random), sin(random));
}

float DotGridGradient(int ix, int iy, float x, float y, int gradientOffset)
{
    float2 randomVec = RandomGradient(ix, iy, gradientOffset);
    
    // Compute the distance vector
    float dx = x - (float) ix;
    float dy = y - (float) iy;
 
    // Compute the dot-product
    return (dx * randomVec.x + dy * randomVec.y);
}

[numthreads(8,8,1)]
void PerlinNoise (uint3 id : SV_DispatchThreadID)
{
    float value = 0;
    
    // float2 center = float2(0.5f, 0.5f) * _ResultBufferSizeX;
    // float distToCenter = length(float2(id.x, id.y) - center);
    // float radius = _ResultBufferSizeX * 0.5f;
    // if (distToCenter > radius)
    // {
    //     value = 0;
    // }
    // else
    // {
    //     float hypo = sqrt(pow(radius * 0.6, 2) * 2);
    //     float angle = acos(distToCenter / hypo);
    //     value = abs(sin(angle)) % 1;
    // }
    // _ResultBuffer[id.x + id.y * _ResultBufferSizeX] = value;
    // _ResultTexture[id.xy] = SampleColor(value);
    // return;
    
    for (int i = 0; i < _NoiseLayersCount; i++)
    {
        NoiseLayer currentLayer = _NoiseLayers[i];
        
        float x = float(id.x) / currentLayer.GradientSizeX;
        float y = float(id.y) / currentLayer.GradientSizeY;
    
        // Determine grid cell coordinates
        int x0 = int(floor(x));
        int x1 = x0 + 1;
        int y0 = int(floor(y));
        int y1 = y0 + 1;
 
        // Determine interpolation weights
        // Could also use higher order polynomial/s-curve here
        float sx = x - (float) x0;
        float sy = y - (float) y0;
 
        // Interpolate between grid point gradients
        float n0 = DotGridGradient(x0, y0, x, y, currentLayer.GradientOffset);
        float n1 = DotGridGradient(x1, y0, x, y, currentLayer.GradientOffset);
        float ix0 = Interpolate(n0, n1, sx, currentLayer.UseSmootherStep);
        n0 = DotGridGradient(x0, y1, x, y, currentLayer.GradientOffset);
        n1 = DotGridGradient(x1, y1, x, y, currentLayer.GradientOffset);
        float ix1 = Interpolate(n0, n1, sx, currentLayer.UseSmootherStep);
        float layerValue = Interpolate(ix0, ix1, sy, currentLayer.UseSmootherStep);
    
        layerValue = layerValue / 2 + 0.5f;
        
        value += layerValue * currentLayer.LayerWeigth * _NoiseWeigthsMultiplier;
    }
    
    _ResultBuffer[id.x + id.y * _ResultBufferSizeX] = value;
    _ResultTexture[id.xy] = SampleColor(value);
    //_Result[id.xy] = float4(float(x0) / (_GradientSizeX), float(y0) / (_GradientSizeY), value, 1);
}
