// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel ComputeNoise
#pragma kernel MarchingCubes

#include "Utils.compute"
#include "MarchingCubeConstants.compute"
#include "NoiseGenerationUtils.compute"
#include "ChunkUtils.compute"


//structs
struct NoiseLayer3D
{
    float LayerWeigth;
    
    int GradientOffset;
    int NoiseScale;
    
    int UseSmootherStep;
};

struct CubeMesh
{
    float3 Vertices[12];
    int Triangles[12];
};

struct ChunkMesh
{
    float3 Vertices[12 * CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE];
    int Triangles[12 * CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE];
};


RWTexture3D<float> _NoiseTexture;

RWStructuredBuffer<CubeMesh> _GeneratedCells;
RWStructuredBuffer<ChunkMesh> _GeneratedChunks;

uint3 _ChunkZoneSizeToGenerate;
int3 _ChunkOffset;

float _Threshold;
int _SmoothMesh;

// Noise Params
uint _NoiseLayersCount;
StructuredBuffer<NoiseLayer3D> _NoiseLayers;

float _NoiseWeigthsMultiplier;

float _RadiusArroundOrigin;



float ComputeNoiseForCoordinates(int ix, int iy, int iz)
{
    float value = 0;
    
    for (uint i = 0; i < _NoiseLayersCount; i++)
    {
        NoiseLayer3D currentLayer = _NoiseLayers[i];
        int noiseScale = currentLayer.NoiseScale;
        int offset = currentLayer.GradientOffset;
        bool smootherstep = currentLayer.UseSmootherStep == 1;
        
        float x = float(ix) / noiseScale;
        float y = float(iy) / noiseScale;
        float z = float(iz) / noiseScale;
    
        // Determine grid cell coordinates
        int x0 = int(floor(x));
        int x1 = x0 + 1;
        int y0 = int(floor(y));
        int y1 = y0 + 1;
        int z0 = int(floor(z));
        int z1 = z0 + 1;
 
        // Determine interpolation weights
        // Could also use higher order polynomial/s-curve here
        float sx = x - (float) x0;
        float sy = y - (float) y0;
        float sz = z - (float) z0;
 
        // Interpolate between grid point gradients
        float n0 = DotGridGradient(x0, y0, z0, x, y, z, offset);
        float n1 = DotGridGradient(x1, y0, z0, x, y, z, offset);
        float iy0z0 = Interpolate(n0, n1, sx, smootherstep);
        
        n0 = DotGridGradient(x0, y1, z0, x, y, z, offset);
        n1 = DotGridGradient(x1, y1, z0, x, y, z, offset);
        float iy1z0 = Interpolate(n0, n1, sx, smootherstep);
        
        float iz0 = Interpolate(iy0z0, iy1z0, sy, smootherstep);
        
        n0 = DotGridGradient(x0, y0, z1, x, y, z, offset);
        n1 = DotGridGradient(x1, y0, z1, x, y, z, offset);
        float iy0z1 = Interpolate(n0, n1, sx, smootherstep);
        
        n0 = DotGridGradient(x0, y1, z1, x, y, z, offset);
        n1 = DotGridGradient(x1, y1, z1, x, y, z, offset);
        float iy1z1 = Interpolate(n0, n1, sx, smootherstep);
        
        float iz1 = Interpolate(iy0z1, iy1z1, sy, smootherstep);
        
        float layerValue = Interpolate(iz0, iz1, sz, smootherstep);
    
        layerValue = layerValue / 2 + 0.5f;
        
        value += layerValue * currentLayer.LayerWeigth * _NoiseWeigthsMultiplier;
    }
    return value;
}

float ComputeNoiseForCoordinates(int3 xyz)
{
    return ComputeNoiseForCoordinates(xyz.x, xyz.y, xyz.z);
}

[numthreads(8, 8, 8)]
void ComputeNoise(uint3 id : SV_DispatchThreadID)
{
    int3 offset = _ChunkOffset * CHUNK_SIZE;
    int3 coordinates = id + offset;
    
    float sqrDistToOrigin = SqrMagnitude(coordinates);
    if (_RadiusArroundOrigin > 0 && sqrDistToOrigin <= _RadiusArroundOrigin * _RadiusArroundOrigin)
    {
        _NoiseTexture[id.xyz] = lerp(1, ComputeNoiseForCoordinates(coordinates),
        sqrDistToOrigin / (_RadiusArroundOrigin * _RadiusArroundOrigin));
    }
    else
    {
        _NoiseTexture[id.xyz] = ComputeNoiseForCoordinates(coordinates);
    }
}



[numthreads(8, 8, 8)]
void MarchingCubes(uint3 id : SV_DispatchThreadID)
{
    uint index = CoordinatesToChunkifiedIndex(id.xyz, _ChunkZoneSizeToGenerate);
    CubeMesh mesh;
    float3 meshVertices[12] = _DefaultVertices;
    int meshTriangles[12] = _DefaultTriangles;
    
    bool smoothMesh = _SmoothMesh == 1;
    
    uint3 localCoordinates = CoordinatesToLocalCoordinates(id.xyz);
    uint cellID = LocalCoordinatesToChunkifiedLocalOffset(localCoordinates) * 12;
    
    
    // Determine the index in _TriangleTable of the current mesh
    uint meshIndex = 0;
    for (int i = 0; i < 8; i++)
    {
        if (_NoiseTexture[id.xyz + _VerticesCoordinates[i]] < _Threshold)
        {
            meshIndex |= 1 << i;
        }
    }
    
    meshTriangles = _TriangleTable[meshIndex];
    
    for (int j = 0; j < 12; j++)
    {
        int rawVertexIndex = meshTriangles[j];
        if (rawVertexIndex == -1)
        {
            break;
        }
        
        uint3 cubeCoordsOffset = _CubeContainingVertexOffset[rawVertexIndex];
        bool isVertexInsideChunk = IsInsideChunk(localCoordinates + cubeCoordsOffset);
        bool isVertexInThisCell = Equals(cubeCoordsOffset, uint3(0, 0, 0)) || !isVertexInsideChunk;
        
        
        if (!isVertexInThisCell)
        {
            rawVertexIndex = _VertexEquivalentInContainingCube[rawVertexIndex];
            meshTriangles[j] = rawVertexIndex + cellID + LocalCoordinatesToChunkifiedLocalOffset(cubeCoordsOffset) * 12;
        }
        else
        {
            meshTriangles[j] += cellID;
        }
        
        if (isVertexInThisCell && Equals(meshVertices[rawVertexIndex], _EmptyVertice))
        {
            int2 edgeVertexIndices = _EdgeVertexIndices[rawVertexIndex];
            float2 noiseValues = float2(_NoiseTexture[id.xyz + _VerticesCoordinates[edgeVertexIndices.x]], _NoiseTexture[id.xyz + _VerticesCoordinates[edgeVertexIndices.y]]);
            float lerpFactor = smoothMesh ? abs((_Threshold - noiseValues.x) / (noiseValues.x - noiseValues.y)) : 0.5;
            
            float3 vertexPos = lerp(_VerticesCoordinates[edgeVertexIndices.x], _VerticesCoordinates[edgeVertexIndices.y], lerpFactor);
            meshVertices[rawVertexIndex] = vertexPos;
        }
    }
    
    mesh.Vertices = meshVertices;
    mesh.Triangles = meshTriangles;
    _GeneratedCells[index] = mesh;
}